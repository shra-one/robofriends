{"version":3,"sources":["components/CardLists.js","components/Search.js","components/Scroll.js","components/ErrorBountry.js","App.js","serviceWorker.js","index.js"],"names":["CardLists","data","Error","Search","props","className","type","placeholder","onChange","handleChange","name","id","Scroll","children","ErrorBountry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","value","target","searchfield","robots","fetch","then","response","json","datas","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAuBeA,G,MApBG,SAAC,GAAW,EAAVC,KAEf,MAAM,IAAIC,MAAM,YCMNC,EARA,SAACC,GACZ,OACI,yBAAKC,UAAU,aACX,2BAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,EAAMK,aAAcC,KAAK,GAAGC,GAAG,OCIvFC,EARA,SAACR,GACZ,OACI,yBAAKC,UAAU,UACVD,EAAMS,WCHEC,E,kDACjB,WAAYV,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAS,M,+BAIb,OAAOG,KAAKJ,MAAMC,SAClB,+CACAG,KAAKf,MAAMS,a,GAhBuBQ,aC+D3BC,E,kDArDb,aAAe,IAAD,8BACZ,gBAgBFC,eAAe,SAACC,GAEd,IAAMC,EAAMD,EAAME,OAAOD,MACzB,EAAKL,SAAS,CACZO,YAAYF,KAnBd,EAAKV,MAAQ,CACXa,OAAQ,GACRD,YAAa,IAJH,E,gEASM,IAAD,OACjBE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAACQ,OAAOK,S,+BAc3B,IAAD,EACmBd,KAAKJ,MAA1Ba,EADE,EACFA,OAAQD,EADN,EACMA,YAEPO,EAAeN,EAAOO,QAAO,SAAAC,GAEhC,OAAQA,EAAM1B,KAAK2B,cAAcC,SAASX,EAAYU,kBAI3D,OAAQT,EAAOW,OAIX,yBAAKlC,UAAU,OACb,2CACA,kBAAC,EAAD,CAAQI,aAAcU,KAAKI,iBAC3B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWtB,KAAMiC,OARzB,2C,GArCgBb,aCCEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.b36b92e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardLists = ({data}) => {\r\n if(true){\r\n     throw new Error('nooooo')\r\n }\r\n    \r\n    \r\n    return (\r\n        <div className=\"cardlists\">\r\n           {\r\n           data.map((robot, i)=>\r\n           <Card \r\n           key={i} \r\n           robot={robot}\r\n           />)\r\n           }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardLists\r\n","import React from 'react'\r\n \r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"searchBox\">\r\n            <input type=\"search\" placeholder=\"Search Robots\" onChange={props.handleChange} name=\"\" id=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n\r\n","import React, { Children } from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"canvas\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBountry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({\r\n            hasError:true\r\n        })\r\n    }\r\n    render() {\r\n        return this.state.hasError?\r\n        <h2>Something wrong</h2>:\r\n        this.props.children\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\n \nimport \"./App.css\";\nimport CardLists from \"components/CardLists\";\n\nimport { robots } from \"robots.js\";\nimport Search from \"components/Search\";\nimport Scroll from \"components/Scroll\";\nimport ErrorBountry from \"components/ErrorBountry\";\n\n \nclass App extends Component  {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n \n    \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(datas=>this.setState({robots:datas }))\n    \n \n    \n  }\n  onSearchChange=(event)=>{\n    // console.log(event.target.value);\n    const value=event.target.value;\n    this.setState({\n      searchfield:value\n    })  \n    \n    \n  }\n  render() {\n  const {robots, searchfield}=this.state;\n    \n    const filteredRobots=robots.filter(robot=>\n      {\n       return  robot.name.toLowerCase().includes(searchfield.toLowerCase())\n      });\n\n \n  return !robots.length? \n  <h1>Loading</h1>:\n     (\n \n      <div className=\"App\">\n        <h1>Robo Friend</h1>\n        <Search handleChange={this.onSearchChange}  />\n        <Scroll>\n          <ErrorBountry>\n          <CardLists data={filteredRobots} />\n          </ErrorBountry>\n        </Scroll>\n      </div>\n    );\n \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}